# coding: utf-8

# # PyCity Schools Analysis
# 
# * As a whole, schools with higher budgets, did not yield better test results. By contrast, schools with higher spending per student actually (\$645-675) underperformed compared to schools with smaller budgets (<\$585 per student).
# 
# * As a whole, smaller and medium sized schools dramatically out-performed large sized schools on passing math performances (89-91% passing vs 67%).
# 
# * As a whole, charter schools out-performed the public district schools across all metrics. However, more analysis will be required to glean if the effect is due to school practices or the fact that charter schools tend to serve smaller student populations per school. 
# ---

# ### Note
# * Instructions have been included for each segment. You do not have to follow them exactly, but they are included to help you think through the steps.

# In[1]:


# Dependencies and Setup
import pandas as pd
import numpy as np

# File to Load (Remember to Change These)
school_data_to_load = "Resources/schools_complete.csv"
student_data_to_load = "Resources/students_complete.csv"

# Read School and Student Data File and store into Pandas Data Frames
school_data = pd.read_csv(school_data_to_load)
student_data = pd.read_csv(student_data_to_load)

# Combine the data into a single dataset
school_data_complete = pd.merge(student_data, school_data, how="left", on=["school_name", "school_name"])


# ## District Summary
# 
# * Calculate the total number of schools
# 
# * Calculate the total number of students
# 
# * Calculate the total budget
# 
# * Calculate the average math score 
# 
# * Calculate the average reading score
# 
# * Calculate the overall passing rate (overall average score), i.e. (avg. math score + avg. reading score)/2
# 
# * Calculate the percentage of students with a passing math score (70 or greater)
# 
# * Calculate the percentage of students with a passing reading score (70 or greater)
# 
# * Create a dataframe to hold the above results
# 
# * Optional: give the displayed data cleaner formatting

# In[2]:


#school total and student total
school_total = len(school_data_complete['school_name'].unique())
student_total = school_data_complete["Student ID"].count()


# In[3]:


#budget total
budget_total = school_data['budget'].sum()


# In[5]:


#avg scores
avg_math = school_data_complete['math_score'].mean()
avg_read = school_data_complete['reading_score'].mean()
overall_rate = (avg_math + avg_read) / 2


# In[7]:


#pass rates
pass_math = school_data_complete[(school_data_complete['math_score'] > 70)].count()['student_name']
pass_math_pct = pass_math / float(student_total) * 100
pass_read = school_data_complete[(school_data_complete['reading_score'] > 70)].count()['student_name']
pass_read_pct = pass_read / float(student_total) * 100


# In[8]:


#prep summary
district_summary = pd.DataFrame({'Total Schools': [school_total],
                                'Total Students': [student_total],
                                'Total Budget': [budget_total],
                                'Average Math Score': [avg_math],
                                'Average Reading Score': [avg_read],
                                '% Passing Math': [pass_math_pct],
                                '% Passing Reading': [pass_read_pct],
                                '% Overall Passing Rate': [overall_rate]})


# In[10]:


district_summary


# In[11]:





# ## School Summary

# * Create an overview table that summarizes key metrics about each school, including:
#   * School Name
#   * School Type
#   * Total Students
#   * Total School Budget
#   * Per Student Budget
#   * Average Math Score
#   * Average Reading Score
#   * % Passing Math
#   * % Passing Reading
#   * Overall Passing Rate (Average of the above two)
#   
# * Create a dataframe to hold the above results

# ## Top Performing Schools (By Passing Rate)

# * Sort and display the top five schools in overall passing rate

# In[13]:


school_data.head()


# In[14]:


#school type
school_types = school_data.set_index(['school_name'])['type']


# In[16]:


#school count
school_counts = school_data_complete['school_name'].value_counts()


# In[18]:


#school budget
school_budget = school_data_complete.groupby(['school_name']).mean()['budget']
school_student_spend = school_budget / school_counts


# In[21]:


#avg scores by subject
per_school_math = school_data_complete.groupby(["school_name"]).mean()["math_score"]
per_school_reading = school_data_complete.groupby(["school_name"]).mean()["reading_score"]
# Pass by subject & overall
school_pass_math = school_data_complete[(school_data_complete["math_score"] > 70)]
school_pass_reading = school_data_complete[(school_data_complete["reading_score"] > 70)]
per_school_pass_math = school_pass_math.groupby(["school_name"]).count()["student_name"] / school_counts * 100
per_school_pass_reading = school_pass_reading.groupby(["school_name"]).count()["student_name"] / school_counts * 100
overall_pass_rate = (per_school_pass_math + per_school_pass_reading) / 2


# In[24]:


#create dataframe
school_summary = pd.DataFrame({"School Type": school_types,
                                   "Total Students": school_counts,
                                   "Total School Budget": school_budget,
                                   "Per Student Budget": school_student_spend,
                                   "Average Math Score": per_school_math,
                                   "Average Reading Score": per_school_reading,
                                   "% Passing Math": per_school_pass_math,
                                   "% Passing Reading": per_school_pass_reading,
                                   "% Overall Passing Rate": overall_pass_rate})
school_summary


# In[25]:


#top 5 school
top_schools = school_summary.sort_values(["% Overall Passing Rate"], ascending=False)
top_schools.head(5)


# In[13]:





# ## Bottom Performing Schools (By Passing Rate)

# * Sort and display the five worst-performing schools

# In[26]:


#bottom schools
bottom_schools = school_summary.sort_values(["% Overall Passing Rate"], ascending=True)
bottom_schools.head(5)


# In[14]:





# ## Math Scores by Grade

# * Create a table that lists the average Reading Score for students of each grade level (9th, 10th, 11th, 12th) at each school.
# 
#   * Create a pandas series for each grade. Hint: use a conditional statement.
#   
#   * Group each series by school
#   
#   * Combine the series into a dataframe
#   
#   * Optional: give the displayed data cleaner formatting

# In[27]:


#grade level conditional
grade_9 = school_data_complete[(school_data_complete["grade"] == "9th")]
grade_10 = school_data_complete[(school_data_complete["grade"] == "10th")]
grade_11 = school_data_complete[(school_data_complete["grade"] == "11th")]
grade_12 = school_data_complete[(school_data_complete["grade"] == "12th")]


# In[28]:


#grouping by school & mathscore avg
grade_9_scores = grade_9.groupby(["school_name"]).mean()["math_score"]
grade_10_scores = grade_10.groupby(["school_name"]).mean()["math_score"]
grade_11_scores = grade_11.groupby(["school_name"]).mean()["math_score"]
grade_12_scores = grade_12.groupby(["school_name"]).mean()["math_score"]


# In[29]:


#combine df
scores_by_grade = pd.DataFrame({"9th": grade_9_scores, "10th": grade_10_scores,
                                "11th": grade_11_scores, "12th": grade_12_scores})


# In[30]:


scores_by_grade


# In[15]:





# ## Reading Score by Grade 

# * Perform the same operations as above for reading scores

# In[31]:


#grouping by school & readingscore avg
grade_9_scores_read = grade_9.groupby(["school_name"]).mean()["reading_score"]
grade_10_scores_read = grade_10.groupby(["school_name"]).mean()["reading_score"]
grade_11_scores_read = grade_11.groupby(["school_name"]).mean()["reading_score"]
grade_12_scores_read = grade_12.groupby(["school_name"]).mean()["reading_score"]


# In[32]:


scores_by_grade_read = pd.DataFrame({"9th": grade_9_scores_read, "10th": grade_10_scores_read,
                                "11th": grade_11_scores_read, "12th": grade_12_scores_read})


# In[33]:


scores_by_grade_read


# ## Scores by School Spending

# * Create a table that breaks down school performances based on average Spending Ranges (Per Student). Use 4 reasonable bins to group school spending. Include in the table each of the following:
#   * Average Math Score
#   * Average Reading Score
#   * % Passing Math
#   * % Passing Reading
#   * Overall Passing Rate (Average of the above two)

# In[34]:


# Sample bins. Feel free to create your own bins.
spending_bins = [0, 585, 615, 645, 675]
group_names = ["<$585", "$585-615", "$615-645", "$645-675"]


# In[36]:


#category
school_summary["Spending Ranges (Per Student)"] = pd.cut(school_student_spend, spending_bins, labels=group_names)


# In[37]:


#spending categories
spending_math_scores = school_summary.groupby(["Spending Ranges (Per Student)"]).mean()["Average Math Score"]
spending_reading_scores = school_summary.groupby(["Spending Ranges (Per Student)"]).mean()["Average Reading Score"]
spending_passing_math = school_summary.groupby(["Spending Ranges (Per Student)"]).mean()["% Passing Math"]
spending_passing_reading = school_summary.groupby(["Spending Ranges (Per Student)"]).mean()["% Passing Reading"]
overall_passing_rate = (spending_math_scores + spending_reading_scores) / 2


# In[38]:


#dataframe
school_spending_summary = pd.DataFrame({"Average Math Score" : spending_math_scores,
                                 "Average Reading Score": spending_reading_scores,
                                 "% Passing Math": spending_passing_math,
                                 "% Passing Reading": spending_passing_reading,
                                 "% Overall Passing Rate": overall_passing_rate})


# In[39]:


school_spending_summary


# In[18]:





# ## Scores by School Size

# * Perform the same operations as above, based on school size.

# In[40]:


# Sample bins. Feel free to create your own bins.
size_bins = [0, 1000, 2000, 5000]
size_group_names = ["Small (<1000)", "Medium (1000-2000)", "Large (2000-5000)"]


# In[42]:


#category by bin
school_summary["School Size"] = pd.cut(school_summary["Total Students"], size_bins, labels=size_group_names)


# In[43]:


#size scores
size_math_score = school_summary.groupby(["School Size"]).mean()["Average Math Score"]
size_reading_score = school_summary.groupby(["School Size"]).mean()["Average Reading Score"]
size_pass_math = school_summary.groupby(["School Size"]).mean()["% Passing Math"]
size_pass_reading = school_summary.groupby(["School Size"]).mean()["% Passing Reading"]
overall_pass_rate = (size_pass_math + size_pass_reading) / 2


# In[44]:


#make dataframe
size_summary = pd.DataFrame({"Average Math Score" : size_math_score,
                             "Average Reading Score": size_reading_score,
                             "% Passing Math": size_pass_math,
                             "% Passing Reading": size_pass_reading,
                             "% Overall Passing Rate": overall_pass_rate})


# In[45]:


size_summary


# In[19]:





# ## Scores by School Type

# * Perform the same operations as above, based on school type.

# In[46]:


#type scores
type_math_score = school_summary.groupby(["School Type"]).mean()["Average Math Score"]
type_reading_score = school_summary.groupby(["School Type"]).mean()["Average Reading Score"]
type_pass_math = school_summary.groupby(["School Type"]).mean()["% Passing Math"]
type_pass_reading = school_summary.groupby(["School Type"]).mean()["% Passing Reading"]
type_overall_pass_rate = (type_pass_math + type_pass_reading) / 2


# In[48]:


#type DF
type_summary_df = pd.DataFrame({"Average Math Score" : type_math_score,
                             "Average Reading Score": type_reading_score,
                             "% Passing Math": type_pass_math,
                             "% Passing Reading": type_pass_reading,
                             "% Overall Passing Rate": type_overall_pass_rate})


# In[49]:


type_summary_df

